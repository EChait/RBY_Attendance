@using School.Models
@model EnrollmentViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
    <link rel="stylesheet" runat="server" href="https://site-assets.fontawesome.com/releases/v5.15.4/css/all.css">
    <link href="../css/enrollment.css" rel="stylesheet" runat="server" />
<body>
    <div class="container mt-5">
        <div class="row fs-2">
            <div class="col-4">
                <div class="d-flex justify-content-end">
                    <span style="color: red;">Teacher:</span>
                </div>
            </div>
            <div class="col-8">
                <select id="eTeacher" class="form-select" aria-label="Input Teacher">
                @foreach(var item in Model.users)
                    {
                            @if (item.Title == "teacher")
                            {
                                @if (item.Id == @Model.teacherId)
                                {
                                    <option id=@Html.DisplayFor(modelItem => item.Id) selected="selected">@Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)</option>
                                }
                                else
                                {
                                    <option id=@Html.DisplayFor(modelItem => item.Id)>@Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)</option>                                                               
                                }
                            }
                    }
                        }
                </select>
            </div>
            <div class="col-4 mt-3">
                <div class="d-flex justify-content-end">
                    <span style="color: red;">Subject:</span>
                </div>
            </div>
            <div class="col-8 mt-3">
               <select class="form-select" id="eSubject" aria-label="Input Student">
               @if(Model.subjects != null)
               {
                    @foreach(var item in Model.subjects)
                    {
                        @if(item.Name == @Model.subjectName)
                        {
                            <option id=@Html.DisplayFor(modelItem => item.Name) selected="selected">@Html.DisplayFor(modelItem => item.Name)</option>                                
                        }
                        else
                        {
                            <option id=@Html.DisplayFor(modelItem => item.Name)>@Html.DisplayFor(modelItem => item.Name)</option>                                    
                        }
                    }
               }
               </select>
            </div>

            <div class="col-12 mt-5">
                <span style="color: red;">Enrolled Students</span>
                <span>@Model.enrolls.Count()</span>
            </div>
            <div class="col-12 mt-3">
                <div class="d-flex flex-wrap align-items-center" style="margin-left: 20px !important">
                    @if(Model != null)
                        {
                            @foreach (var item in Model.enrolls)
                            {
                                <div class="itemDiv">
                                    <div>
                                        @Html.DisplayFor(modelItme => item.Student)
                                    </div>
                                    <i class="fa fa-trash" onclick= "onDeleteEnroll(this)" id="@Html.DisplayFor(modelItem => item.Id)" aria-hidden="true"></i>
                                </div>                                                                                                            
                            }
                        }
                </div>
            </div>

            <div class="col-3 mt-5">
                <div class="d-flex justify-content-end">
                    <span style="color: red;">Add Student:</span>
                </div>
            </div>
            <div class="col-9 mt-5 autocomplete">
                <input class="form-select" id="eStudent" aria-label="Input Student" size="50" autocomplete="off" />
            </div>
            <div class="col-12 mt-5">
                <div class="d-flex justify-content-end">
                    <button type="button" id ="btnCreateEnroll">Add</button>
                </div>
            </div>
        </div>
    </div>

        <script>
            function autocomplete(inp, arr) {
                /*the autocomplete function takes two arguments,
                the text field element and an array of possible autocompleted values:*/
                var currentFocus;
                /*execute a function when someone writes in the text field:*/
                inp.addEventListener("input", function (e) {
                    var a, b, i, val = this.value;
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) { return false; }
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        /*check if the item starts with the same letters as the text field value:*/
                        const indexFound = arr[i].toUpperCase().indexOf(val.toUpperCase());
                        if (indexFound !== -1) {
                            /*create a DIV element for each matching element:*/
                            b = document.createElement("DIV");
                            b.innerHTML = arr[i].substr(0, indexFound);
                            /*make the matching letters bold:*/
                            b.innerHTML += "<strong>" + arr[i].substr(indexFound, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(indexFound + val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click", function (e) {
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocompleted values,
                                (or any other open lists of autocompleted values:*/
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    }
                });
                /*execute a function presses a key on the keyboard:*/
                inp.addEventListener("keydown", function (e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) {
                        /*If the arrow DOWN key is pressed,
                        increase the currentFocus variable:*/
                        currentFocus++;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 38) { //up
                        /*If the arrow UP key is pressed,
                        decrease the currentFocus variable:*/
                        currentFocus--;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 13) {
                        /*If the ENTER key is pressed, prevent the form from being submitted,*/
                        e.preventDefault();
                        if (currentFocus > -1) {
                            /*and simulate a click on the "active" item:*/
                            if (x) x[currentFocus].click();
                        }
                    }
                });
                function addActive(x) {
                    /*a function to classify an item as "active":*/
                    if (!x) return false;
                    /*start by removing the "active" class on all items:*/
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = (x.length - 1);
                    /*add class "autocomplete-active":*/
                    x[currentFocus].classList.add("autocomplete-active");
                }
                function removeActive(x) {
                    /*a function to remove the "active" class from all autocomplete items:*/
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }
                function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document,
                    except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }
                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }

            /*An array containing all the country names in the world:*/
            var students = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.users.Where(u => u.Title == "student").Select(u => u.FirstName + " " + u.LastName)))

            /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
            autocomplete(document.getElementById("eStudent"), students);
        </script>

</body>

}
